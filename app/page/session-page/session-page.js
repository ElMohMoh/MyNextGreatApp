"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var item_service_1 = require("../../item/item.service");
var router_1 = require("@angular/router");
var SessionPage = (function () {
    function SessionPage(itemService, route) {
        this.itemService = itemService;
        this.route = route;
    }
    SessionPage.prototype.ngOnInit = function () {
        var id = +this.route.snapshot.params["id"];
        this.session = this.itemService.getSession(id);
        this.startDt = this.fixDate(new Date(this.session.start));
        this.endDt = this.fixDate(new Date(this.session.end));
        this.description = this.session.descriptionShort;
    };
    SessionPage.prototype.toggleFavorite = function () {
        this.session.favorite = !this.session.favorite;
    };
    SessionPage.prototype.fixDate = function (date) {
        return new Date(date.getUTCFullYear(), date.getMonth(), date.getUTCDate(), date.getHours(), date.getMinutes(), date.getMilliseconds());
    };
    Object.defineProperty(SessionPage.prototype, "range", {
        get: function () {
            var startMinute = this.startDt.getMinutes() + '';
            var endMinutes = this.endDt.getMinutes() + '';
            var startAM = this.startDt.getHours() < 12 ? 'am' : 'pm';
            var endAM = this.endDt.getHours() < 12 ? 'am' : 'pm';
            var startHours = (this.startDt.getHours() <= 12 ? this.startDt.getHours() : this.startDt.getHours() - 12) + '';
            var endHours = (this.endDt.getHours() <= 12 ? this.endDt.getHours() : this.endDt.getHours() - 12) + '';
            return (startHours.length === 1 ? '0' + startHours : startHours) + ':' + (startMinute.length === 1 ? '0' + startMinute : startMinute) +
                startAM +
                ' - ' + (endHours.length === 1 ? '0' + endHours : endHours) + ":" + (endMinutes.length === 1 ? '0' + endMinutes : endMinutes) + endAM;
        },
        enumerable: true,
        configurable: true
    });
    SessionPage.prototype.toggleDescription = function (arg) {
        var btn = arg.object;
        if (btn.text === 'MORE') {
            btn.text = 'LESS';
            this.description = this.session.description;
        }
        else {
            btn.text = 'MORE';
            this.description = this.session.descriptionShort;
        }
    };
    SessionPage = __decorate([
        core_1.Component({
            selector: "mp",
            moduleId: module.id,
            templateUrl: "./session-page.html",
        }),
        __metadata("design:paramtypes", [item_service_1.ItemService,
            router_1.ActivatedRoute])
    ], SessionPage);
    return SessionPage;
}());
exports.SessionPage = SessionPage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2Vzc2lvbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTZEO0FBQzdELHdEQUFzRDtBQUV0RCwwQ0FBaUQ7QUFVakQ7SUFNSSxxQkFDWSxXQUF3QixFQUN4QixLQUFxQjtRQURyQixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixVQUFLLEdBQUwsS0FBSyxDQUFnQjtJQUM3QixDQUFDO0lBRUwsOEJBQVEsR0FBUjtRQUVJLElBQU0sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUMxRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztJQUNyRCxDQUFDO0lBRUQsb0NBQWMsR0FBZDtRQUNJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDbkQsQ0FBQztJQUVELDZCQUFPLEdBQVAsVUFBUSxJQUFVO1FBQ2QsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7SUFDNUksQ0FBQztJQUVELHNCQUFJLDhCQUFLO2FBQVQ7WUFFSSxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUNqRCxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUM5QyxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ3pELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksR0FBRyxJQUFJLENBQUM7WUFFckQsSUFBSSxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFFLEdBQUcsRUFBRSxDQUFDO1lBQ2hILElBQUksUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBRSxHQUFHLEVBQUUsQ0FBQztZQUV4RyxNQUFNLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxLQUFLLENBQUMsR0FBRyxHQUFHLEdBQUcsVUFBVSxHQUFHLFVBQVUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxXQUFXLEdBQUcsV0FBVyxDQUFDO2dCQUNqSSxPQUFPO2dCQUNILEtBQUssR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxRQUFRLEdBQUUsUUFBUSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLFVBQVUsR0FBRyxVQUFVLENBQUMsR0FBRSxLQUFLLENBQUM7UUFFaEosQ0FBQzs7O09BQUE7SUFFRCx1Q0FBaUIsR0FBakIsVUFBa0IsR0FBYztRQUU1QixJQUFJLEdBQUcsR0FBWSxHQUFHLENBQUMsTUFBTSxDQUFDO1FBRTlCLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEtBQUssTUFBTSxDQUFDLENBQUEsQ0FBQztZQUNyQixHQUFHLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztZQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQ2hELENBQUM7UUFBQSxJQUFJLENBQUEsQ0FBQztZQUNGLEdBQUcsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO1lBQ2xCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztRQUNyRCxDQUFDO0lBQ0wsQ0FBQztJQXZEUSxXQUFXO1FBTHZCLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsSUFBSTtZQUNkLFFBQVEsRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNuQixXQUFXLEVBQUUscUJBQXFCO1NBQ3JDLENBQUM7eUNBUTJCLDBCQUFXO1lBQ2pCLHVCQUFjO09BUnhCLFdBQVcsQ0F3RHZCO0lBQUQsa0JBQUM7Q0FBQSxBQXhERCxJQXdEQztBQXhEWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LFZpZXdDaGlsZCAgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBJdGVtU2VydmljZSB9IGZyb20gXCIuLi8uLi9pdGVtL2l0ZW0uc2VydmljZVwiO1xyXG5pbXBvcnQgeyBTZXNzaW9uIH0gZnJvbSBcIi4uLy4uL3NoYXJlZC9pbnRlcmZhY2VzXCI7XHJcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSBcIkBhbmd1bGFyL3JvdXRlclwiO1xyXG5cclxuaW1wb3J0IHsgRXZlbnREYXRhIH0gZnJvbSAnZGF0YS9vYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAndWkvYnV0dG9uJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwibXBcIixcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIuL3Nlc3Npb24tcGFnZS5odG1sXCIsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTZXNzaW9uUGFnZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBzZXNzaW9uOiBTZXNzaW9uOyBcclxuICAgIHN0YXJ0RHQ6IERhdGU7XHJcbiAgICBlbmREdDogRGF0ZTtcclxuICAgIGRlc2NyaXB0aW9uIDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgaXRlbVNlcnZpY2U6IEl0ZW1TZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlXHJcbiAgICApIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG5cclxuICAgICAgICBjb25zdCBpZCA9ICt0aGlzLnJvdXRlLnNuYXBzaG90LnBhcmFtc1tcImlkXCJdO1xyXG4gICAgICAgIHRoaXMuc2Vzc2lvbiA9IHRoaXMuaXRlbVNlcnZpY2UuZ2V0U2Vzc2lvbihpZCk7XHJcbiAgICAgICAgdGhpcy5zdGFydER0ID0gdGhpcy5maXhEYXRlKG5ldyBEYXRlKHRoaXMuc2Vzc2lvbi5zdGFydCkpO1xyXG4gICAgICAgIHRoaXMuZW5kRHQgPSB0aGlzLmZpeERhdGUobmV3IERhdGUodGhpcy5zZXNzaW9uLmVuZCkpO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSB0aGlzLnNlc3Npb24uZGVzY3JpcHRpb25TaG9ydDtcclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVGYXZvcml0ZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNlc3Npb24uZmF2b3JpdGUgPSAhdGhpcy5zZXNzaW9uLmZhdm9yaXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGZpeERhdGUoZGF0ZTogRGF0ZSk6IERhdGUge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSggZGF0ZS5nZXRVVENGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0VVRDRGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldE1pbGxpc2Vjb25kcygpKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcmFuZ2UoKTogc3RyaW5nIHtcclxuXHJcbiAgICAgICAgdmFyIHN0YXJ0TWludXRlID0gdGhpcy5zdGFydER0LmdldE1pbnV0ZXMoKSArICcnO1xyXG4gICAgICAgIHZhciBlbmRNaW51dGVzID0gdGhpcy5lbmREdC5nZXRNaW51dGVzKCkgKyAnJztcclxuICAgICAgICB2YXIgc3RhcnRBTSA9IHRoaXMuc3RhcnREdC5nZXRIb3VycygpIDwgMTIgPyAnYW0nIDogJ3BtJztcclxuICAgICAgICB2YXIgZW5kQU0gPSB0aGlzLmVuZER0LmdldEhvdXJzKCkgPCAxMiA/ICdhbScgOiAncG0nO1xyXG5cclxuICAgICAgICB2YXIgc3RhcnRIb3VycyA9ICh0aGlzLnN0YXJ0RHQuZ2V0SG91cnMoKSA8PSAxMiA/IHRoaXMuc3RhcnREdC5nZXRIb3VycygpIDogdGhpcy5zdGFydER0LmdldEhvdXJzKCkgLSAxMiApICsgJyc7XHJcbiAgICAgICAgdmFyIGVuZEhvdXJzID0gKHRoaXMuZW5kRHQuZ2V0SG91cnMoKSA8PSAxMiA/IHRoaXMuZW5kRHQuZ2V0SG91cnMoKSA6IHRoaXMuZW5kRHQuZ2V0SG91cnMoKSAtIDEyICkgKyAnJztcclxuXHJcbiAgICAgICAgcmV0dXJuIChzdGFydEhvdXJzLmxlbmd0aCA9PT0gMSA/ICcwJyArIHN0YXJ0SG91cnMgOiBzdGFydEhvdXJzKSArICc6JyArIChzdGFydE1pbnV0ZS5sZW5ndGggPT09IDEgPyAnMCcgKyBzdGFydE1pbnV0ZSA6IHN0YXJ0TWludXRlKSArXHJcbiAgICAgICAgICAgIHN0YXJ0QU0gKyBcclxuICAgICAgICAgICAgICAgICcgLSAnICsgKGVuZEhvdXJzLmxlbmd0aCA9PT0gMSA/ICcwJyArIGVuZEhvdXJzOiBlbmRIb3VycykgKyBcIjpcIiArIChlbmRNaW51dGVzLmxlbmd0aCA9PT0gMSA/ICcwJyArIGVuZE1pbnV0ZXMgOiBlbmRNaW51dGVzKSsgZW5kQU07XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZURlc2NyaXB0aW9uKGFyZzogRXZlbnREYXRhKXtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgYnRuID0gPEJ1dHRvbj4gYXJnLm9iamVjdDtcclxuXHJcbiAgICAgICAgaWYgKGJ0bi50ZXh0ID09PSAnTU9SRScpe1xyXG4gICAgICAgICAgICBidG4udGV4dCA9ICdMRVNTJztcclxuICAgICAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IHRoaXMuc2Vzc2lvbi5kZXNjcmlwdGlvbjtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgYnRuLnRleHQgPSAnTU9SRSc7XHJcbiAgICAgICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSB0aGlzLnNlc3Npb24uZGVzY3JpcHRpb25TaG9ydDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=